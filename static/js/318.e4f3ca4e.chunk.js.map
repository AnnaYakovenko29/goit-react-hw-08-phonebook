{"version":3,"file":"static/js/318.e4f3ca4e.chunk.js","mappings":"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","sources":["Redux/shared/components/Button.jsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","Redux/shared/components/InputField.jsx","../node_modules/nanoid/index.browser.js","Redux/shared/useForm.jsx","components/LoginForm/fields.jsx","components/LoginForm/initialState.jsx","components/LoginForm/LoginForm.jsx","components/pages/LoginPage.jsx"],"sourcesContent":["const Button = ({ children, type = 'submit' }) => {\n  return (\n    <button type={type}>\n      {children}\n    </button>\n  );\n};\nexport default Button;","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\n\nconst InputField = ({ label, handleChange, ...props }) => {\n  const id = useMemo(() => nanoid(), []);\n  return (\n    <div>\n      <label htmlFor={id}>\n        {label}\n      </label>\n      <input id={id} onChange={handleChange} {...props} />\n    </div>\n  );\n};\nexport default InputField;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useState } from 'react';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = ({ target }) => {\n    setState(prevState => {\n      const { name, value, checked, type } = target;\n      const newValue = type === 'checkbox' ? checked : value;\n      return { ...prevState, [name]: newValue };\n    });\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(state);\n    setState(initialState);\n  };\n  return { state, setState, handleChange, handleSubmit };\n};\nexport default useForm;","const fields = {\n    email: {\n      type: 'text',\n      name: 'email',\n      required: true,\n      label: 'User email',\n    },\n    password: {\n      type: 'password',\n      name: 'password',\n      required: true,\n      label: 'User password',\n    },\n  };\n  export default fields;","const initialState = {\n    email: '',\n    password: '',\n  };\n  export default initialState;","import InputField from '../../Redux/shared/components/InputField';\nimport useForm from '../../Redux/shared/useForm';\nimport Button from '../../Redux/shared/components/Button';\nimport fields from './fields';\nimport initialState from './initialState';\n\nconst LoginForm = ({ onSubmit }) => {\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n  const { email, password } = state;\n  return (\n    <form onSubmit={handleSubmit}>\n      <InputField value={email} onChange={handleChange} {...fields.email} />\n      <InputField\n        value={password}\n        onChange={handleChange}\n        {...fields.password}\n      />\n      <Button>Login now</Button>\n    </form>\n  );\n};\nexport default LoginForm;","import LoginForm from '../LoginForm/LoginForm';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { isUserLogin } from '../../Redux/auth/auth-selectors';\nimport { login } from '../../Redux/auth/auth-operations';\n\n// import css from './loginPage.module.scss';\n\nconst LoginPage = () => {\n  const isLogin = useSelector(isUserLogin);\n  const dispatch = useDispatch();\n\n  const handleLogin = data => {\n    dispatch(login(data));\n  };\n\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />;\n  }\n  return (\n    <div>\n      <h1>Login</h1>\n      <LoginForm onSubmit={handleLogin} />\n    </div>\n  );\n};\nexport default LoginPage;"],"names":["children","type","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","label","handleChange","props","id","useMemo","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","htmlFor","onChange","initialState","onSubmit","useState","state","setState","prevState","name","value","checked","newValue","handleSubmit","e","preventDefault","email","required","password","useForm","InputField","fields","Button","isLogin","useSelector","isUserLogin","dispatch","useDispatch","to","data","login"],"sourceRoot":""}