{"version":3,"file":"static/js/188.45e53bf1.chunk.js","mappings":"0OAIe,SAASA,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAQXC,EAAQ,WACZL,EAAQ,IACRE,EAAU,GACX,EAED,OACE,kBAAMI,SAZW,SAAAC,GACjBA,EAAEC,iBACFL,GAASM,EAAAA,EAAAA,IAAgB,CAAEV,KAAAA,EAAME,OAAAA,KACjCI,GACD,EAQC,WACE,8BACE,0BAAM,UACN,kBACEK,KAAK,OACLX,KAAK,OACLY,MAAOZ,EACPa,QAAQ,yHACRC,MAAM,yIACNC,SAAU,SAAAP,GACRP,EAAQO,EAAEQ,OAAOJ,MAClB,EACDK,UAAQ,QAGZ,8BACE,0BAAM,YACN,kBACEN,KAAK,MACLX,KAAK,SACLY,MAAOV,EACPW,QAAQ,yFACRC,MAAM,+FACNC,SAAU,SAAAP,GACRL,EAAUK,EAAEQ,OAAOJ,MACpB,EACDK,UAAQ,QAGZ,mBAAQN,KAAK,SAAb,SAAsB,kBAG3B,C,cChCD,EAjBe,WACb,IAAMP,GAAWC,EAAAA,EAAAA,MAGjB,OACE,8BACE,0BAAM,2BACN,kBACEM,KAAK,OACLX,KAAK,OACLa,QAAQ,yHACRE,SAAU,SAAAP,GAAC,OATII,EASaJ,EAAEQ,OAAOJ,MATbR,GAASc,EAAAA,EAAAA,GAAeN,IAAjC,IAAAA,CASJ,MAIlB,ECnBYO,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,ECAtBC,EAAsB,SAAAH,GAAK,OAAIA,EAAMI,MAAV,ECoDxC,EA3CoB,WAClB,IAAMC,GAAYC,EAAAA,EAAAA,KAAY,SAAAN,GAAK,OAAIA,EAAMC,SAASI,SAAnB,IAC7BrB,GAAWC,EAAAA,EAAAA,MACXgB,GAAWK,EAAAA,EAAAA,IAAYP,GACvBK,GAASE,EAAAA,EAAAA,IAAYH,GACrBI,EAAsB,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EAAUG,QAAO,qBAAGxB,KAC5C4B,cAAcC,SAASL,EAAOI,cADW,KAIhDE,EAAAA,EAAAA,YAAU,WACR1B,GAAS2B,EAAAA,EAAAA,MACV,GAAE,CAAC3B,IAMJ,OACE,gCACCqB,IAAa,uBAAG,gBACjB,+BACGE,QADH,IACGA,OADH,EACGA,EAAwBK,KAAI,YAA2B,IAAxBhC,EAAuB,EAAvBA,KAAMiC,EAAiB,EAAjBA,GAAI/B,EAAa,EAAbA,OACxC,OACE,gBAAaF,KAAMiC,EAAnB,WACE,yBACGjC,EAAK,KAAGE,MAEX,mBACES,KAAK,SACLuB,QAAS,kBAhBA,SAAAD,GACnB7B,GAAS+B,EAAAA,EAAAA,IAAmBF,GAC7B,CAc0BG,CAAaH,EAAnB,EAFX,SAGC,aAPMA,EAaZ,QAKN,ECnCD,EAXqB,WACnB,OACE,iCACE,wBAAI,eACJ,SAACnC,EAAD,KACA,wBAAI,cACJ,SAAC,EAAD,KACA,SAAC,EAAD,MAGL,C","sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","Redux/Contacts/contact-selectors.js","Redux/Filter/filter-selectors.js","components/ContactList/ContactList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchAddContact } from '../../Redux/Contacts/contact-operations';\n\nexport default function Form () {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const formSumbit = e => {\n    e.preventDefault();\n    dispatch(fetchAddContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={formSumbit}>\n      <label>\n        <span>Name</span>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={e => {\n            setName(e.target.value);\n          }}\n          required\n        />\n      </label>\n      <label>\n        <span>Number</span>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          onChange={e => {\n            setNumber(e.target.value);\n          }}\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\n","import React from 'react';\nimport { filterContacts } from '../../Redux/Filter/filter-slice';\nimport { useDispatch } from 'react-redux';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const handleChange = value => dispatch(filterContacts(value));\n\n  return (\n    <label>\n      <span>Find contacts by name</span>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        onChange={e => handleChange(e.target.value)}\n      />\n    </label>\n  );\n};\n\nexport default Filter;","export const getAllContacts = store => store.contacts.items;","export const getFilteredContacts = store => store.filter;","import { useSelector, useDispatch } from 'react-redux';\nimport { getAllContacts } from '../../Redux/Contacts/contact-selectors';\nimport { getFilteredContacts } from '../../Redux/Filter/filter-selectors';\nimport { useEffect } from 'react';\nimport {\n  fetchAllContacts,\n  fetchDeleteContact,\n} from '../../Redux/Contacts/contact-operations';\n\nconst ContactList = () => {\n  const isLoading = useSelector(store => store.contacts.isLoading);\n  const dispatch = useDispatch();\n  const contacts = useSelector(getAllContacts);\n  const filter = useSelector(getFilteredContacts);\n  const filterContactsContacts = contacts?.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase())\n  );\n  \n  useEffect(() => {\n    dispatch(fetchAllContacts())\n  }, [dispatch]);\n\n  const handleDelete = id => {\n    dispatch(fetchDeleteContact(id));\n  };\n\n  return (\n    <>\n    {isLoading && <p>Loading...</p>}\n    <ul>\n      {filterContactsContacts?.map(({ name, id, number }) => {\n        return (\n          <li key={id} name={id}>\n            <p>\n              {name}: {number}\n            </p>\n            <button\n              type=\"button\"\n              onClick={() => handleDelete(id)}\n            >\n              Delete\n            </button>\n          </li>\n        );\n\n      })}\n    </ul>\n    </>\n\n  );\n};\n\nexport default ContactList;\n\n","import Form from '../components/ContactForm/ContactForm';\nimport Filter from '../components/Filter/Filter';\nimport ContactList from '../components/ContactList/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <Form />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\nexport default ContactsPage;"],"names":["Form","useState","name","setName","number","setNumber","dispatch","useDispatch","reset","onSubmit","e","preventDefault","fetchAddContact","type","value","pattern","title","onChange","target","required","filterContacts","getAllContacts","store","contacts","items","getFilteredContacts","filter","isLoading","useSelector","filterContactsContacts","toLowerCase","includes","useEffect","fetchAllContacts","map","id","onClick","fetchDeleteContact","handleDelete"],"sourceRoot":""}